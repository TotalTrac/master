SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
CREATE PROCEDURE [dbo].[MailPieceScansGetHistoricalAverage]
	@EntryPoint			char(5)
	, @Destination		char(5)
	, @PostalClassID	int
AS
BEGIN
	SET NOCOUNT ON;

    WITH CTE AS 
	(
		SELECT
			s.MAILPIECESCAN_MAILPIECEID
			, CASE 
				WHEN CONVERT(TIME, s.MAILPIECESCAN_DATETIME) < o.OPERATION_CUTOFF THEN DATEADD(dd, 0, DATEDIFF(dd, 0, s.MAILPIECESCAN_DATETIME))
				ELSE DATEADD(dd, 1, DATEDIFF(dd, 0, s.MAILPIECESCAN_DATETIME)) 
			END	 AS [DATETIME]
			, o.OPERATION_CUTOFF
			, seg.MAILSEGMENT_DROPDATE
			, RN = ROW_NUMBER() OVER (PARTITION BY s.MAILPIECESCAN_MAILPIECEID ORDER BY s.MAILPIECESCAN_DATETIME)
			FROM
				[dbo].[MailPieces] AS p
				INNER JOIN [dbo].[MailPieceScans] AS s			
					ON p.MAILPIECE_ID = s.MAILPIECESCAN_MAILPIECEID
				INNER JOIN [dbo].[Operations] AS o
					ON s.MAILPIECESCAN_OPERATIONID = o.OPERATION_ID
				INNER JOIN [dbo].[MailSegments] AS seg
					ON p.MAILPIECE_SEGMENTID = seg.MAILSEGMENT_ID
			WHERE
				o.OPERATION_CUTOFF IS NOT NULL
				AND (seg.MAILSEGMENT_POSTALCLASSID = @PostalClassID AND seg.MAILSEGMENT_ENTRYPOINT = @EntryPoint)
				AND LEFT(p.MAILPIECE_ZIPCODE, LEN(@Destination)) = @Destination
	)
	SELECT
		--COUNT(p.MAILPIECE_ID) AS [TOTAL PIECES],
		AVG(DATEDIFF(HOUR, CTE.MAILSEGMENT_DROPDATE, CTE.DATETIME)) AS [AVG HOURS]
	FROM
		[dbo].[MailPieces] AS p			
		INNER JOIN CTE
			ON p.MAILPIECE_ID = CTE.MAILPIECESCAN_MAILPIECEID
			AND CTE.RN = 1;
END
GO